@model NewProject.Models.garbage

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/User_layout.cshtml";
}

<h2> Garbage Detail</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        @*   <div class="form-group">
                @Html.LabelFor(model => model.fk_user_id, "UserName", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="form-control">
                    @Html.DropDownList("fk_user_id", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.fk_user_id, "", new { @class = "text-danger" })
                </div>
            </div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.fk_garbageName, "Garbage Type", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="form-control">
                    @Html.DropDownList("fk_GName","Please Select")
                    @Html.DropDownList("fk_GName", null, " Select Type", htmlAttributes: new { @class = "form-control", @placeholder = "Please Select" })
                    @Html.ValidationMessageFor(model => model.fk_garbageName, "", new { @class = "text-danger" })
                </div>
            </div>*@


        <div class="form-group">
            @Html.LabelFor(model => model.fk_garbageType, "Garbage Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="form-control">
                @Html.DropDownList("fk_garbageName", null, " Select Type", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.fk_garbageType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            Hygiene Level
            <div class="form-control">

                <select name="Hygiene_Level" class="form-control">
                    <option value="" label="Select Hygiene Level" selected="selected">Select Hygiene level </option>
                    <option>Moderate</option>
                    <option>High</option>
                    <option>Low</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="form-control">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control", @placeholder = "Add Description" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            Weight
            <div class="form-control">
                <input class="form-control" type="number" name="Weight" id="weight" required />
            </div>
        </div>

        <div class="form-group">
            Estimated Cost
            <p id="cost"></p>
        </div>



        @* <div class="form-group">
                @Html.LabelFor(model => model.created_by, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="form-control">
                    @Html.EditorFor(model => model.created_by, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.created_by, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.updated_by, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="form-control">
                    @Html.EditorFor(model => model.updated_by, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.updated_by, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.created_on, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="form-control">
                    @Html.EditorFor(model => model.created_on, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.created_on, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.updated_on, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="form-control">
                    @Html.EditorFor(model => model.updated_on, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.updated_on, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Submit" class="btn btn-success btn-sm" id="btn"
                       onmouseover="OnMouseOver()"
                       onmouseout=" OnMouseOut()"
                       onclick="return ConfirmSubmit()" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    var Weight = document.getElementById("weight");
    var price = document.getElementById("cost");
    Weight.addEventListener("input", Calculate);


    function Calculate() {

        var wt = parseFloat(Weight.value) || 0;
        rps = wt * 100;
        price.innerHTML = rps;

        return price;
    }

    document.getElementById("btn").onmouseover = function () {

        this.style.background = "black";
        this.style.color = "white";
    }
    document.getElementById("btn").onmouseout = function () {

        this.style.background = "green";
        this.style.color = "white";
    }

    function ConfirmSubmit() {
        if (confirm("Are you sure you want to submit")) {
            alert("you selected ok");
            return true;
        }
        else {
            return false;
            confi("you selected cancel");
        }

    }
</script>

